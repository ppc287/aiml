import numpy as np
import pandas as pd
from pprint import pprint

data=pd.read_csv('playtennis.csv')
data_size=len(data)
treenodes=[]
tree={'ROOT':data}

def total_entropy(data,col):
    mydict={}
    for e in data[col]:
        if e in mydict.keys():
            mydict[e]+=1
        else:
            mydict[e]=1
    total=sum(mydict.values())
    E=0
    for k in mydict.keys():
        E+=entropy(mydict[k],total)
    return E

def entropy(num,denom):
    return -(num/denom)*np.log2(num/denom)

def get_sorted_data(data,column):
    sort={}
    for c in get_attributes(data,column):
        sort[c]=data.loc[data[column]==c]
    return sort

def get_attributes(data,column):
    return data[column].unique().tolist()

def InfoGain(te,sd,eba):
    length=data_size
    total=0
    for c,df in sd.items():
        total+=(len(df)/length)*eba[c]
    return te-total

def get_entropy_by_attribute(sd):
    e={}
    for k,df in sd.items():
        e[k]=total_entropy(df,'PlayTennis')
    return e
def drop_node(d,c):
    return data.drop(c,axis=1)

def id3(tree):
    for branch, data in tree.items():
        if not isinstance(data, pd.DataFrame):
            continue
        columns = data.columns
        total_entropy_for_data = total_entropy(data.values, -1)
        if len(columns) == 1:
            break
        info_gain_list=[]
        for i in range(0,len(data.columns)-1):
            sorted_rows = get_sorted_data(data,columns[i])
            entropy_by_attribute = get_entropy_by_attribute(sorted_rows)
            info_gain = InfoGain(total_entropy_for_data, sorted_rows,entropy_by_attribute)
            info_gain_list.append(info_gain)
        node = info_gain_list.index(max(info_gain_list))
        branches = get_sorted_data(data, columns[node])
        for attr, df in branches.items():
            if (total_entropy(df, columns[-1]) == 0):
                branches[attr] = df.iloc[0,-1]
            else:
                branches[attr] = df.drop(columns[node],axis=1)
        treenodes.append(columns[node])
        child = {columns[node]: {}}
        tree[branch] = child
        tree[branch][columns[node]] = branches
        id3(tree[branch][columns[node]])
x=id3(tree)
pprint(tree,depth=5)
